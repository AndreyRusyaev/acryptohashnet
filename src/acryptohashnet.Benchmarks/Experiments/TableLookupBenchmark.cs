using BenchmarkDotNet.Attributes;
using System;
using System.Runtime.CompilerServices;

namespace acryptohashnet.Benchmarks
{
    [MemoryDiagnoser]
    public class TableLookupBenchmark
    {
        private static readonly byte[] BytePi = new byte[]
        {
            041, 046, 067, 201,
            162, 216, 124, 001,
            061, 054, 084, 161,
            236, 240, 006, 019,

            098, 167, 005, 243,
            192, 199, 115, 140,
            152, 147, 043, 217,
            188, 076, 130, 202,

            030, 155, 087, 060,
            253, 212, 224, 022,
            103, 066, 111, 024,
            138, 023, 229, 018,

            190, 078, 196, 214,
            218, 158, 222, 073,
            160, 251, 245, 142,
            187, 047, 238, 122,

            169, 104, 121, 145,
            021, 178, 007, 063,
            148, 194, 016, 137,
            011, 034, 095, 033,

            128, 127, 093, 154,
            090, 144, 050, 039,
            053, 062, 204, 231,
            191, 247, 151, 003,

            255, 025, 048, 179,
            072, 165, 181, 209,
            215, 094, 146, 042,
            172, 086, 170, 198,

            079, 184, 056, 210,
            150, 164, 125, 182,
            118, 252, 107, 226,
            156, 116, 004, 241,

            069, 157, 112, 089,
            100, 113, 135, 032,
            134, 091, 207, 101,
            230, 045, 168, 002,

            027, 096, 037, 173,
            174, 176, 185, 246,
            028, 070, 097, 105,
            052, 064, 126, 015,

            085, 071, 163, 035,
            221, 081, 175, 058,
            195, 092, 249, 206,
            186, 197, 234, 038,

            044, 083, 013, 110,
            133, 040, 132, 009,
            211, 223, 205, 244,
            065, 129, 077, 082,

            106, 220, 055, 200,
            108, 193, 171, 250,
            036, 225, 123, 008,
            012, 189, 177, 074,

            120, 136, 149, 139,
            227, 099, 232, 109,
            233, 203, 213, 254,
            059, 000, 029, 057,

            242, 239, 183, 014,
            102, 088, 208, 228,
            166, 119, 114, 248,
            235, 117, 075, 010,

            049, 068, 080, 180,
            143, 237, 031, 026,
            219, 153, 141, 051,
            159, 017, 131, 020
        };

        private static readonly int[] IntPi = new int[]
        {
            041, 046, 067, 201,
            162, 216, 124, 001,
            061, 054, 084, 161,
            236, 240, 006, 019,

            098, 167, 005, 243,
            192, 199, 115, 140,
            152, 147, 043, 217,
            188, 076, 130, 202,

            030, 155, 087, 060,
            253, 212, 224, 022,
            103, 066, 111, 024,
            138, 023, 229, 018,

            190, 078, 196, 214,
            218, 158, 222, 073,
            160, 251, 245, 142,
            187, 047, 238, 122,

            169, 104, 121, 145,
            021, 178, 007, 063,
            148, 194, 016, 137,
            011, 034, 095, 033,

            128, 127, 093, 154,
            090, 144, 050, 039,
            053, 062, 204, 231,
            191, 247, 151, 003,

            255, 025, 048, 179,
            072, 165, 181, 209,
            215, 094, 146, 042,
            172, 086, 170, 198,

            079, 184, 056, 210,
            150, 164, 125, 182,
            118, 252, 107, 226,
            156, 116, 004, 241,

            069, 157, 112, 089,
            100, 113, 135, 032,
            134, 091, 207, 101,
            230, 045, 168, 002,

            027, 096, 037, 173,
            174, 176, 185, 246,
            028, 070, 097, 105,
            052, 064, 126, 015,

            085, 071, 163, 035,
            221, 081, 175, 058,
            195, 092, 249, 206,
            186, 197, 234, 038,

            044, 083, 013, 110,
            133, 040, 132, 009,
            211, 223, 205, 244,
            065, 129, 077, 082,

            106, 220, 055, 200,
            108, 193, 171, 250,
            036, 225, 123, 008,
            012, 189, 177, 074,

            120, 136, 149, 139,
            227, 099, 232, 109,
            233, 203, 213, 254,
            059, 000, 029, 057,

            242, 239, 183, 014,
            102, 088, 208, 228,
            166, 119, 114, 248,
            235, 117, 075, 010,

            049, 068, 080, 180,
            143, 237, 031, 026,
            219, 153, 141, 051,
            159, 017, 131, 020
        };

        private static readonly uint[] UintPi = new uint[]
        {
            041, 046, 067, 201,
            162, 216, 124, 001,
            061, 054, 084, 161,
            236, 240, 006, 019,

            098, 167, 005, 243,
            192, 199, 115, 140,
            152, 147, 043, 217,
            188, 076, 130, 202,

            030, 155, 087, 060,
            253, 212, 224, 022,
            103, 066, 111, 024,
            138, 023, 229, 018,

            190, 078, 196, 214,
            218, 158, 222, 073,
            160, 251, 245, 142,
            187, 047, 238, 122,

            169, 104, 121, 145,
            021, 178, 007, 063,
            148, 194, 016, 137,
            011, 034, 095, 033,

            128, 127, 093, 154,
            090, 144, 050, 039,
            053, 062, 204, 231,
            191, 247, 151, 003,

            255, 025, 048, 179,
            072, 165, 181, 209,
            215, 094, 146, 042,
            172, 086, 170, 198,

            079, 184, 056, 210,
            150, 164, 125, 182,
            118, 252, 107, 226,
            156, 116, 004, 241,

            069, 157, 112, 089,
            100, 113, 135, 032,
            134, 091, 207, 101,
            230, 045, 168, 002,

            027, 096, 037, 173,
            174, 176, 185, 246,
            028, 070, 097, 105,
            052, 064, 126, 015,

            085, 071, 163, 035,
            221, 081, 175, 058,
            195, 092, 249, 206,
            186, 197, 234, 038,

            044, 083, 013, 110,
            133, 040, 132, 009,
            211, 223, 205, 244,
            065, 129, 077, 082,

            106, 220, 055, 200,
            108, 193, 171, 250,
            036, 225, 123, 008,
            012, 189, 177, 074,

            120, 136, 149, 139,
            227, 099, 232, 109,
            233, 203, 213, 254,
            059, 000, 029, 057,

            242, 239, 183, 014,
            102, 088, 208, 228,
            166, 119, 114, 248,
            235, 117, 075, 010,

            049, 068, 080, 180,
            143, 237, 031, 026,
            219, 153, 141, 051,
            159, 017, 131, 020
        };

        public byte[] ByteBuffer { get; set; }

        public int[] IntBuffer { get; set; }

        public uint[] UintBuffer { get; set; }

        [Params(4, 8, 16, 18, 32, 36)]
        public int Rounds { get; set; }

        [GlobalSetup]
        public void Setup()
        {
            ByteBuffer = new byte[48];
            IntBuffer = new int[48];
            UintBuffer = new uint[48];
        }

        [Benchmark]
        public void RoundWithBytes()
        {
            byte piIndex = 0;
            for (uint ii = 0; ii < Rounds; ii++)
            {
                for (int jj = 0; jj < ByteBuffer.Length; jj++)
                {
                    piIndex = ByteBuffer[jj] ^= BytePi[piIndex];
                }

                piIndex = unchecked((byte)((piIndex + ii) & 0xff)); // % 256
            }
        }

        [Benchmark]
        public void RoundWithInts()
        {
            for (int ii = 0, piIndex = 0; ii < Rounds; ii++)
            {
                for (int jj = 0; jj < IntBuffer.Length; jj++)
                {
                    piIndex = IntBuffer[jj] ^= IntPi[piIndex];
                }

                piIndex = (piIndex + ii) & 0xff; // % 256
            }
        }

        [Benchmark]
        public void RoundWithUints()
        {
            for (uint ii = 0, piIndex = 0; ii < Rounds; ii++)
            {
                for (int jj = 0; jj < UintBuffer.Length; jj++)
                {
                    piIndex = UintBuffer[jj] ^= UintPi[piIndex];
                }

                piIndex = (piIndex + ii) & 0xff; // % 256
            }
        }

        [Benchmark]
        public void RoundWithUintsOptimized()
        {
            for (uint ii = 0, piIndex = 0; ii < Rounds; ii++)
            {
                piIndex = ProcessBuffer(UintBuffer, piIndex);

                piIndex = (piIndex + ii) & 0xff; // % 256
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private uint ProcessBuffer(uint[] buffer, uint piIndex)
        {
            for (int jj = 0; jj < buffer.Length; jj++)
            {
                piIndex = buffer[jj] ^= UintPi[piIndex];
            }

            return piIndex;
        }
    }
}
